# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.maxapplications: 70
    app.maxapplications_perperson: 3
    app.cxt:
        title: Cuentos por Teléfono
        date_long: Viernes, 23 de Abril de 2021
        date_calls: Viernes, 23 de Abril de 6 a 10
        hashtag: cuentosxtelefono
        cop_sing: cuento
        cop_plural: cuentos
        cop_phrase_question: contemos un cuento
    app.pxt:
        title: Poemas por Teléfono
        date_long: Lunes, 21 de Marzo de 2022
        date_calls: Lunes, 21 de Marzo de 7 a 10
        hashtag: poemasxtelefono
        cop_sing: poema
        cop_plural: poemas
        cop_phrase_question: recitemos un poema

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    Twig\Extension\Intl: ~

    kernel.listener.prefix:
        class: App\EventListener\TablePrefixEventListener
        tags:
            - { name: doctrine.event_listener, event: loadClassMetadata, method: loadClassMetadata }
